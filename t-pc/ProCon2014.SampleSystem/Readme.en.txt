#2014 NAPROCK Procon: Sample software for competition section

## Folder Structure

Folder structure is shown in the following. 

- client\bin

The execution file of sample client is put in this folder. 
This application should be executed from the command prompt. 

- client\src

The source file of sample client is put in this folder.

- simpleserver

The execution file of sample server (console version) called SimpleServer 
is put in this folder. 

- publishedserver

The execution file of sample server (GUI version) called PublishedServer 
is put in this folder. 

- problemmaker

The assignment (problem) generation tool called ProblemMaker 
for competition is put in this folder.


## Operating Environment

### Operating Environment for PublishedServer(Sample Software (GUI Version))

PublishedServer(sample software (GUI version)) requires 
the following environments: 
- .NET Framework 4.5 or later should be installed
- TCP80 port can be used. 
- The user should execute it as an administrator. 

### Operating Environment for SimpleServer(Sample Software (Console Version))

SimpleServer(sample software (console version)) requires 
the following environments: 
- .NET Framework 4.0 or later (or similar one) should be installed. 
- TCP80 port can be used. 
- The user should execute it as an administrator. 

### Operating Environments for ProblemMaker(Assignment Generation Tool)

ProblemMaker (assignment generation tool) requires 
the following environments:
- .NET Framework 4.0 or later should be installed. 

### Operating Environments for Sample Client

Sample client requires the following environments: 
- .NET Framework 2.0 or later (or similar one) should be installed. 

### Execution Check of Operating Environments

The organizer has already checked the execution of sample software 
in the following operating environments: 

- Windows 8.1

.NET Framework 4.5.1

Firefox 29

- Windows 7

.NET Framework 4.5.1

Internet Explorer 11

- Ubuntu 14.04 (only sample server(console version) and sample client)

Mono 3.2.8

- Gentoo Linux (only sample server(console version) and sample client)

Mono 3.2.8

### How to Build

Sample client has been developed with Visual Studio 2013. 
It has been already checked that it can be build with xbuild of Mono 3.2.8. 


## Remarks

The distrubuted software is only samples, so it can be different 
from the programs used on the contest day. 
Therefore, it is highly recommendable to generate the users' own code 
according to the competition description, FAQ or protcol description etc.

In addition, some sample assignments are included for sample server 
(console version), but they are only for system checking. 
These assignments have no relation to the assignments used on the contest day. 


## Protocols

Server address is written as {ServerAddress}. 
Character string corresponding to {ServerAddress} will be disclosed later. 

### Retrieval of Assignments

The assignments can be retrieved by sending a GET request from the URL
<http://{ServerAddress}/problem/probXX.ppm>, 
where XX stands for the 2 digit number of the assignment. 

### Submission of the Answer

The answer can be submitted from the URL <http://{ServerAddress}/SubmitForm>. 
The following http requests are sent from this form. 

The answer is sent by POST to <http://{ServerAddress}/SubmitAnswer>. 

Make the body in the form such as 
playerid={TeamToken}&problemid={ProblemID}&answer={Answer}, 
where {TeamToken}, {ProblemID} and {Answer} stands for 
the token for the team, the problem ID number and the answer to be sent, 
respectively. 
Note that {TeamToken}, {ProblemID}, {Answer} should be escaped by RFC 2396. 


# How to Use Sample Client

Sample client should be executed from the command prompt 
or any shell software. 
If the program are executed without any arguments, 
it will be displayed how to execute the commands. 
Please refer to these information to execute the client. 


## Example of Executing Sample Client

In order to retrieve the assignment file with ID "00" 
in the match played at localhost, execute the command 
`ProCon2014.Client.exe GetProblem localhost 0`

In order to submit the text file "ans.txt" of an answer 
for the assignment retrieved above example as Player 1, 
execute the command
`Procon2014.Client.exe SubmitAnswer localhost 0 1 ans.txt`


## How to Use ProblemMaker (Assignment Generation Tool)

The assignments used in SimpleServer or PublishedServer can be 
generated by this program. 

1. Start the program, and click "Select the image" 
  to select the image file used as the original picture in the assignment. 
2. Clicking "Edit the image" enables the users to adjust 
  the image area, the number of rows and columns for the image division, 
  divided image size and the scale of the selected area. 
  The image area can be selected by dragging the masked rectangle area. 
3. Clicking "Use the image as is" enables the users to employ 
  the selected image as it is without any editing. 
4. After inputting the image edit information such as 
  the number of row and column division, maximum selection count, 
  selection cost and swapping cost, an assignment can be generated 
  by clicking "Generate the random problem". 


## How to Use SimpleServer (Sample Server (Console Version))

Before start, put a file "test.prob25" generated by ProblemMaker 
in the current directory. 
(The users can also use their own file already generated as a sample data.)
Any numbers from 1 to 24 can be used as Token. 
ProblemID is fixed to 00. 

1. When the program is started, web server automatically starts 
  and enables the users to retrieve an assignment and submit an answer. 
  The user can enter the time limit (second) as command line argument. 
2. Access the URL "http://{ServerAddress}/SubmitForm".
3. Enter Token, ProblemID and an answer in the form. 
4. After the time limit, the result will be displayed with the message 
  "Press any key to exit..."
5. Exit the program by entering any keys. 


### How to Read the Output from SimpleServer

After SimpleServer starts, the information of the match will be 
displayed as follows. 

IP addresses of the connecting clients are displayed 
whenever the clients connect the server during a match. 
When the server receives an answer, time cost, token 
and the received answer are displayed. 

After the match, a table of the results are displayed. 
Each line of the output is given in the following format: 
(Ranking),(Token),(Team Name),(The Number of Unmatched Divided Images),\
(Total Cost),(Selection Cost),(Swapping Cost)

A folder "log" is generated in the execution folder of the server, 
and another folder "Test_(Execution Date)" is also automatically generated 
in "log" folder. 
The folder "Test_(Execution Date)" contains the following 2 files. 

- answer.txt

  This is the log of the answers received by the server. 
  The log list is given in the following format. 

  (ProblemID),(Token),
  (Time of Receiving the Answer(in seconds since the match starts))

  (The Answer Received by the Server)

- http.txt

  This is an access log for the server.


## How to Use PublishedServer (Sample Server (GUI Version))
1. Start the program and select the assignment file "prob25" generated 
  by ProblemMaker in the "Load problems" window by clicking "Add a problem". 
2. Add only the assignments used in a match. 
3. For each assignment, enter the number of winners and the duration time. 
4. By pressing "OK", the lists of teams and problems 
  as well as debug information in the "Match Management" tab. 
5. By clicking "Start Problem", the assignments are disclosed 
  by http protocol. 
6. The URLs for retrieval of an assignment and for submission of an answer 
  is displayed in "Debug Information" as well as Problem ID. 
7. Solve the problem and access the URL "http://localhost/SubmitForm". 
8. Click "Submit Query" after entering the token displayed in 
  "Team Information", Problem ID and text data for an answer 
  in "Token", "ProblemID" and "Answer Text", respectively. 
9. If the submitted answer is valid and ranked at over 4th place, 
  the restoration process can be shown in "Play Solutions" tab. 
10. "Ranking" tab displays the detailed information of all teams. 
11. The information of the submitted answer can be seen 
  at "Debug Information" in "Match Management" tab. 
12. If plural assignments are selected, click "Set winners" after the match 
  to automatically select the winner teams according to the ranking. 
13. If required, click "Set Winners" to display "PlayerSelectWindow" 
  and manually select the teams to precede. 
  For example, this window can be used in the case 
  where the winners cannot be automatically decided and they should be 
  decided by rolling dice. 
  Select the winner teams from "Candidates of winners" and 
  add appropriate winners to "Actual Winners". 
14. The tournament proceeds by repeating the above procedures. 
